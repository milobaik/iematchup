<script type="text/javascript">
    var c = {};
    var from_pcb, to_pcb;
    var empty_player = {
        name: "EMPTY",
        idx: -1,
        opponent: "",
        rating: "",
        analysis: ""
    };

    var teamRoster = <%= @team_roster_json.html_safe %>;
    var playerList = <%= @player_list_json.html_safe %>;
    var accessToken = "<%= @access_token %>";

    // template for converting team roster defined as a JSON array into an html table for display on the
    // IE matchup app main page
    var plt = jsontemplate.Template("{#template defining table of players on fantasy team roster} \
         <table id=\"roster_matchups\" class=\"player_matchups\" cellpadding=\"2\" cellspacing=\"0\">    \
         <tbody>                                                                                 \
            {.section batters} \
                <tr class=\"player_type_title\"><td colspan='4'>Batters</td>\
                <td align=\"right\"><button onclick=\"setLineup()\">Set Lineup</button></td></tr>                            \
                <tr class=\"player_matchups_header\"><th>Pos</th><th>Player</th><th>Opponent</th><th>Rating</th><th>Analysis</th></tr> \
                {.repeated section @}                                                                      \
                    {.empty?}\
                      <tr id={idx} class=\"empty {position} {modified}\">                                                         \
                        <td>{position}</td>                                                              \
                        <td class=\"player_name_cell\"><em>{player.name}</em><br>&nbsp;</td>               \
                        <td>{player.opponent}</td>                                                                \
                        <td>{player.rating}</td>                                                                  \
                        <td>{player.analysis}</td></tr>     \
                    {.or}\
                      <tr id={idx} class=\"player {position} {modified}\" style=\"cursor:move\">                                                         \
                        <td>{position}</td>                                                              \
                        <td class=\"player_name_cell\"><a href=\"{player.profile_url}\">{player.name}</a><br>({player.mlb_pos}){player.mlb_team}</td>               \
                        <td>{player.opponent}</td>                                                                \
                        <td class=\"player_rating\">{player.rating}</td>                                                                  \
                        <td>{player.analysis}</td></tr>                                                           \
                    {.end} \
                {.end}                                                                                     \
            {.end}                                                                                         \
            {.section bench_batters} \
               <tr class=\"matchup_table_spacer_row\"><td colspan='5'></td></tr>                          \
                {.repeated section @}\
                   <tr id={idx} class=\"player {position} {modified}\" style=\"cursor:move\">                                                         \
                        <td>Bench({player.roster_pos})</td>                                                              \
                        <td class=\"player_name_cell\"><a href=\"{player.profile_url}\">{player.name}</a><br>({player.mlb_pos}){player.mlb_team}</td>               \
                        <td>{player.opponent}</td>                                                                \
                        <td class=\"player_rating\">{player.rating}</td>                                                                  \
                        <td>{player.analysis}</td></tr>                                                           \
                    {.end} \
                <tr id=\"empty_batter\" style=\"display:none;\" class=\"empty_bench_batter\"><td>Bench</td><td><em>EMPTY</em><br>&nbsp;</td><td> </td><td></td><td></td></tr>         \
            {.end}                                                                                         \
            {.section pitchers}                                                                            \
                <tr class=\"matchup_table_spacer_row\"><td colspan='5'></td></tr>                          \
                <tr class=\"player_type_title\"><td colspan='4'>Pitchers</td>\
                <td align=\"right\"><button onclick=\"setLineup()\">Set Lineup</button></td></tr>           \
                <tr class=\"player_matchups_header\"><th>Pos</th><th>Player</th><th>Opponent</th><th>Rating</th><th>Analysis</th></tr> \
                {.repeated section @}                                                                      \
                    {.empty?}\
                      <tr id={idx} class=\"empty {position} {modified}\">                                             \
                        <td>{position}</td>                                                              \
                        <td class=\"player_name_cell\"><em>{player.name}</em><br>&nbsp;</td>               \
                        <td>{player.opponent}</td>                                                                \
                        <td>{player.rating}</td>                                                                  \
                        <td>{player.analysis}</td></tr>     \
                    {.or}\
                      <tr id={idx} class=\"player {position} {modified}\" style=\"cursor:move\">                                                         \
                        <td>{position}</td>                                                              \
                        <td class=\"player_name_cell\"><a href=\"{player.profile_url}\">{player.name}</a><br>({player.mlb_pos}){player.mlb_team}</td>             \
                        <td>{player.opponent}</td>                                                                \
                        <td class=\"player_rating\">{player.rating}</td>                                                                  \
                        <td>{player.analysis}</td></tr>                                                           \
                    {.end}\
                {.end}                                                                                     \
            {.end}                                                                                         \
            {.section bench_pitchers} \
               <tr class=\"matchup_table_spacer_row\"><td colspan='5'></td></tr>                          \
                {.repeated section @}                                                                      \
                    <tr id={idx} class=\"player {position} {modified}\" style=\"cursor:move\">                                                         \
                        <td>Bench({player.roster_pos})</td>                                                              \
                        <td class=\"player_name_cell\"><a href=\"{player.profile_url}\">{player.name}</a><br>({player.mlb_pos}){player.mlb_team}</td>               \
                        <td>{player.opponent}</td>                                                                \
                        <td class=\"player_rating\">{player.rating}</td>                                                                  \
                        <td>{player.analysis}</td></tr>                                                           \
                {.end}           \
                <tr id=\"empty_pitcher\" style=\"display:none;\" class=\"empty_bench_pitcher\"><td>Bench</td><td><em>EMPTY</em><br>&nbsp;</td><td> </td><td></td><td></td></tr>         \
            {.end}                                                                                         \
         </tbody> </table>" );

  function createRosterMatchupTable() {
    document.getElementById("roster").innerHTML = plt.expand(playerList);
    $("tr.player").draggable( {
        helper: "clone",
        start:  startDrag,
        stop: stopDrag
    });
  }

  function processSetLineupResponse( res, status, jqXhr ) {
    playerList = res;
    createRosterMatchupTable();
  }

  function setLineup() {
      $("#roster_matchups tr.modified_roster_row").each( function(index, elt) {
        var pcb = playerList.index[$(this).attr('id')];
        if ( /bench/.test(pcb.section)) {
          // add player to reserve section
          playerList.roster_mods["reserve"][pcb.player.id] = { pos: pcb.player.eligible[0] };
        } else {
          // add player to active section
          playerList.roster_mods["active"][pcb.player.id] = { pos: pcb.player.roster_pos };
        }
      } );

      var sl_url = "/matchup/set_lineup?access_token=" + accessToken;
      $.ajax( {url: sl_url,
              type: 'POST',
              contentType: 'application/json',
              data: JSON.stringify( { payload: playerList.roster_mods } ),
              dataType: 'json',
              async: false,
              success: processSetLineupResponse } );
  }

  function enableDropOnEligiblePositions(positions, rowId ) {
      for ( var i = 0; i < positions.length; i++) {
           $("#roster_matchups tr." + positions[i]).each( function(index, elt) {
               console.log(" Enable Drop On Position: " + positions[i] + "rowId: " + rowId + "id: " + $(this).attr('id'));
               if ( $(this).attr('id') != rowId ) {
                  $(this).droppable({
                      drop: dropPlayer
                  } );
                  $(this).addClass("valid_roster_move_row");
                  $(this).removeClass("modified_roster_row");
            }
         } );
      }
  }

  function enableDropOnEligiblePlayers( players, id, pos, tr_offset) {
      for (var i = 0; i < players.length; i++ ) {
          //console.log("Player: " + players[i].name + " eligible: " + players[i].eligible.toString());
          if ( players[i].player.eligible.indexOf(pos) != -1 ) {
              console.log("Row: " + i + " Player: " + players[i].player.name + " is eligible.");
              trow = i + tr_offset;
              if(players[i].player.id == id) {
                  $("#roster_matchups tr").eq(trow).addClass("selected_roster_row");
                  $("#roster_matchups tr").eq(trow).removeClass("modified_roster_row");
              } else {
                  $("#roster_matchups tr").eq(trow).droppable({
                      drop: dropPlayer
                  } );
                  $("#roster_matchups tr").eq(trow).addClass("valid_roster_move_row");
                  $("#roster_matchups tr").eq(trow).removeClass("modified_roster_row");
              }
          }
      }
  }

  function enableDropOnEmptyBenchBatter( ) {
    var emptyBenchSlot = $("#roster_matchups tr.empty_bench_batter");
    emptyBenchSlot.removeAttr("style");
    emptyBenchSlot.droppable( { drop: dropPlayer
                              });
    emptyBenchSlot.addClass("valid_roster_move_row");
  }

    function enableDropOnEmptyBenchPitcher( ) {
        var emptyBenchSlot = $("#roster_matchups tr.empty_bench_pitcher");
        emptyBenchSlot.removeAttr("style");
        emptyBenchSlot.droppable( { drop: dropPlayer
        });
        emptyBenchSlot.addClass("valid_roster_move_row");
    }

    function startDrag(event, ui) {
      c.tr = this;
      c.helper = ui.helper;
      from_pcb = playerList.index[$(this).attr('id')];

      console.log("From id: " + from_pcb.player.id + " section: " + from_pcb.section + "idx: " + from_pcb.idx + " Position: " + from_pcb.position);
      if (from_pcb.section == "batters") {
        enableDropOnEligiblePositions(from_pcb.player.eligible);
        enableDropOnEligiblePlayers(playerList.bench_batters, from_pcb.player.id, from_pcb.position, playerList.batters.length + 3);
        enableDropOnEmptyBenchBatter();
      } else if (from_pcb.section == "bench_batters") {
         // enable drop on all positions this player is eligible for
         enableDropOnEligiblePositions(from_pcb.player.eligible, from_pcb.idx);
      } else if (from_pcb.section == "pitchers") {
          //enableDropOnEligiblePlayers(playerList.pitchers, dragId, movePos,
          //        playerList.batters.length + playerList.bench_batters.length + 6);
          enableDropOnEligiblePlayers(playerList.bench_pitchers, from_pcb.player.id, from_pcb.position,
                  playerList.batters.length + playerList.bench_batters.length +
                          playerList.pitchers.length + 8);
          enableDropOnEmptyBenchPitcher();
      } else if (from_pcb.section == "bench_pitchers") {
        // enable drop on all positions this player is eligible for
        enableDropOnEligiblePositions(from_pcb.player.eligible, from_pcb.idx);
      }
  }

  function stopDrag(event, ui) {
      var stopId = $(this).attr('id');
      console.log("dragging stopped." + "stopRow: " + stopId);
      $("#roster_matchups").remove();
      createRosterMatchupTable();
  }

  function swapMovedPlayers( from_pcb, to_pcb ) {
      var to_player = to_pcb.player;

      to_pcb.player = from_pcb.player;
      playerList[to_pcb.section][to_pcb.sidx].player = from_pcb.player;
      playerList[to_pcb.section][to_pcb.sidx].modified = "modified_roster_row";
      to_pcb.player.roster_pos = to_pcb.position;

      from_pcb.player = to_player;
      playerList[from_pcb.section][from_pcb.sidx].player = to_player;
      playerList[from_pcb.section][from_pcb.sidx].modified = "modified_roster_row";
      from_pcb.player.roster_pos = from_pcb.position;
  }

  function moveFromPlayerBenchToPlayer( from_pcb, to_pcb ) {
      var to_player = to_pcb.player;

      to_pcb.player = from_pcb.player;
      playerList[to_pcb.section][to_pcb.sidx].player = from_pcb.player;
      to_pcb.player.roster_pos = to_pcb.position;
      playerList[to_pcb.section][to_pcb.sidx].modified = "modified_roster_row";

      from_pcb.player = empty_player;
      from_pcb.empty = true;
      playerList[from_pcb.section][from_pcb.sidx].modified = "modified_roster_row";
      playerList[from_pcb.section][from_pcb.sidx].player = empty_player;
      playerList[from_pcb.section][from_pcb.sidx].empty = true;
      cidx = playerList["index"].length;
      to_player.roster_pos = "Bench";
      playerList["index"].push( { empty: false,
                                  idx: cidx,
                                  section: "bench_batters",
                                  sidx: playerList["bench_batters"].length,
                                  position: "Bench",
                                  player: to_player } );
      playerList["bench_batters"].push( { empty: false,
                                          modified: "modified_roster_row",
                                          idx: cidx,
                                          section: "bench_batters",
                                          sidx: playerList["bench_batters"].length,
                                          position: "Bench",
                                          player: to_player } );
  }

  function moveActivePlayerToEmptyPosition( from_pcb, to_pcb ) {
      if ( /bench/.test(from_pcb.section)) {
          // moving player from bench
          to_pcb.player = from_pcb.player;
          to_pcb.empty = false;
          playerList[to_pcb.section][to_pcb.sidx].modified = "modified_roster_row";
          playerList[to_pcb.section][to_pcb.sidx].player = from_pcb.player;
          playerList[to_pcb.section][to_pcb.sidx].empty = false;
          to_pcb.player.roster_pos = to_pcb.position;

          // delete entry from bench batters array
          console.log("Delete Entry. section: " + from_pcb.section + " sidx: " + from_pcb.sidx + " Name: " + from_pcb.player.name);
          playerList[from_pcb.section].splice(from_pcb.sidx, 1);
          for ( var i = from_pcb.sidx; i < playerList[from_pcb.section].length; i++ ) {
              console.log("player: " + playerList[from_pcb.section][i].player.name + " old sidx: " + playerList[from_pcb.section][i].sidx + " new sidx: " + i);
              playerList[from_pcb.section][i].sidx = i;
              playerList["index"][playerList[from_pcb.section][i].idx].sidx = i;
          }
      } else {
        var to_player = to_pcb.player;

        to_pcb.player = from_pcb.player;
        to_pcb.empty = false;
        playerList[to_pcb.section][to_pcb.sidx].modified = "modified_roster_row";
        playerList[to_pcb.section][to_pcb.sidx].player = from_pcb.player;
        playerList[to_pcb.section][to_pcb.sidx].empty = false;
        to_pcb.player.roster_pos = to_pcb.position;

        from_pcb.player = to_player;
        from_pcb.empty = true;
        playerList[from_pcb.section][from_pcb.sidx].modified = "modified_roster_row";
        playerList[from_pcb.section][from_pcb.sidx].player = to_player;
        playerList[from_pcb.section][from_pcb.sidx].empty = true;
        from_pcb.player.roster_pos = from_pcb.position;
      }
  }

  function moveActivePlayerToBench( from_pcb, section ) {
      var from_player = from_pcb.player;

      from_pcb.player = empty_player;
      from_pcb.empty = true;
      playerList[from_pcb.section][from_pcb.sidx].modified = "modified_roster_row";
      playerList[from_pcb.section][from_pcb.sidx].player = empty_player;
      playerList[from_pcb.section][from_pcb.sidx].empty = true;
      cidx = playerList["index"].length;
      from_player.roster_pos = "Bench";
      playerList["index"].push( { empty: false,
                                  idx: cidx,
                                  section: section,
                                  sidx: playerList[section].length,
                                  position: "Bench",
                                  player: from_player } );
      playerList[section].push( { empty: false,
                                  modified: "modified_roster_row",
                                  idx: cidx,
                                  section: section,
                                  sidx: playerList[section].length,
                                  position: "Bench",
                                  player: from_player } );
  }

  function dropPlayer(event, ui) {
        if ( $(this).hasClass("empty_bench_batter")) {
            console.log("Moving player to bench");
            moveActivePlayerToBench(from_pcb, "bench_batters");
        } else if ( $(this).hasClass("empty_bench_pitcher")) {
            console.log("Moving player to bench");
            moveActivePlayerToBench(from_pcb, "bench_pitchers");
        } else {
          to_pcb = playerList.index[$(this).attr('id')];
          if( ! to_pcb.empty ) {
            console.log("From id: " + from_pcb.player.id + " section: " + from_pcb.section + " idx: " +
                            from_pcb.sidx + "  Position: " + from_pcb.position);
            console.log("To id: " + to_pcb.player.id + " section: " + to_pcb.section + " idx: " + to_pcb.sidx +
                            "  Position: " + to_pcb.position);

            // if moving player to/from bench the drop section must be valid so just
            // swap the players
            if ( /bench/.test(to_pcb.section) || /bench/.test(from_pcb.section)) {
                swapMovedPlayers(from_pcb, to_pcb);
            } else if (/batters/.test(to_pcb.section)) {
                // moving active batter to new position, if player at that position is eligible at moved
                // players position then swap, otherwise move player dropped on to the bench
                if ( to_pcb.player.eligible.indexOf(from_pcb.position) != -1 ) {
                    console.log("Player: " + to_pcb.player.name + " is eligible at " + from_pcb.position);
                    swapMovedPlayers(from_pcb, to_pcb);
                } else {
                    moveFromPlayerBenchToPlayer(from_pcb, to_pcb);
                }
            }
          } else {
              console.log("Moving player to empty position");
              moveActivePlayerToEmptyPosition(from_pcb, to_pcb);
          }
        }

        $(c.helper).remove();
        $("#roster_matchups").remove();
        createRosterMatchupTable();
  }


  $(document).ready(function() {
      createRosterMatchupTable();

    } );

</script>

<header>
  <table>
    <tr><td> <%= image_tag("inside_edge_logo.jpg", :size => '75x75', :alt => 'Inside Edge Scouting Service') %></td>
      <td><h1>Inside Edge Matchup Analysis</h1></td></tr>
  </table>
  <hr/>
</header>

<div id='players' class="player_matchups">
  <table class="roster_matchups_team">
    <tr><td><h3 align="center"><%= "#{@fantasyTeam["name"]}" %></h3></td><td><h3 align="center">Player Matchups For: <%= @todays_date %></h3></td></tr>
  </table>

<div id='roster' class="player_matchups">

</div>
<div style="display: none">
  <table>
    <tr><td>at</td><td><%= @access_token %> </td></tr>
    <tr><td>lid</td><td><%= @league_id %> </td></tr>
  </table>
</div>
</div>